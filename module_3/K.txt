#include <iostream>
#include <vector>
#include <queue>
#include <map>

#define io_boost ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr)
#define endl "\n"

using namespace std;

typedef struct double_linked_list {
    int amount;
    int start;
    bool is_busy;
    struct double_linked_list *prev;
    struct double_linked_list *next;
} list;

void collapse(list *mid) {

}

class Compare {
public:
    bool operator()(list *l1, list *l2) {
        if (l1->is_busy && !l2->is_busy) {
            return true;
        } else if (!l1->is_busy && l2->is_busy) {
            return false;
        }
        return l1->amount < l2->amount;
    }
};

struct request {
    int start_block;
    int count;
};


int n, m;
vector<struct request> requests;
priority_queue<list *, std::vector<list *>, Compare> qu;

int main() {
    io_boost;
    cin >> n >> m;

    requests.resize(m);

    list l = {.amount = n, .start = n, .is_busy = false, .prev = nullptr, .next = nullptr};
    list *blocks = &l;
    qu.push(blocks);

    int current = n, query;
    for (int i = 0; i < m; ++i) {
        cin >> query;
        if (query > 0) {
            list *ma = qu.top();
            if (current < query || ma->amount < query || ma->is_busy) {
                cout << -1 << endl;
                continue;
            }

        } else {
            query *= -1;
            query -= 1;
            current += requests[query].count;
        }
    }
    return 0;
}
